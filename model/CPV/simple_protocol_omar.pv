type key.

(* Functions for encryption and decryption *)
fun enc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; dec(enc(m, k), k) = m.

free c1: channel [private]. 
free c2: channel. 

free ID1: bitstring.
free ID2: bitstring. 
free KEY1:key [private]. 
free KEY2:key [private].

const LOGIN: bitstring.
const SUCCESS: bitstring.
const FAILIRE: bitstring.

event client_login_attempt(bitstring).
event client_login_successful (bitstring).
event client_login_failure (bitstring).
event login_request_from_client(bitstring).
event login_successful(bitstring).
event login_failure(bitstring).

query id:bitstring; inj-event(login_successful(id)) ==> inj-event(client_login_attempt(id)).

let client(ID:bitstring,KEY:key) = 
	event client_login_attempt(ID); 
	out(c2, enc((LOGIN, ID), KEY)); 
	in(c2, val:bitstring);
	let msg = dec(val, KEY) in
	if msg = (SUCCESS, ID) then ( 
		event client_login_successful(ID)) 
	else (
		event client_login_failure(ID)). 


let server(KEY:key) = 
	in(c2, val:bitstring) ;
	let (msg:bitstring, ID:bitstring)  = dec(val, KEY) in  
	if msg = LOGIN then ( 
		event login_request_from_client(ID);
		out(c2, enc((SUCCESS, ID),KEY));
		event login_successful(ID))
	else (
		event login_failure(ID)).

process
	(!  client(ID1,KEY1) | ! client(ID2,KEY2) | ! server(KEY1))
